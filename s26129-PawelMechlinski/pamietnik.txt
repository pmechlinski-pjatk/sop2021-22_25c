<<<2022-02-28>>>
Temat: System Operacyjny.

Moj kochany pamietniczku, na tych zajeciach mnie nie bylo, ale podczas robienia zadan samodzielnie w domu nauczylem sie:
- Ze warto rozwazyc instalowanie Linuksa z poziomu komendy polecen, a nie GUI, bo dzieki temu mozna latwiej debugowac pojawiajace sie bledy.
- Ze podane w dokumentacji ilosci zasobow nawet jesli nazywaja sie "rekomendowane" to i tak moga byc niewystarczajace do zainstalowania wszystkich narzedzi, jesli instalujemy z mysla o stacji roboczej, a nie o serwerze, gdzie np. nie uzywa sie GUI.

Zajęcia dotyczyły instalacji systemu GNU/Linux i tutaj w sumie po wykonaniu jej już x razy nie jest to dla mnie jakoś bardzo nowe, ale jak widać kwestia doboru ilości zasobów jest do dalszego przyjrzenia się jej.

Samo zadanie bardzo fajne, mam wrażenie, że zmusza do dokładniejszego przyjrzenia się problemowi.

<<<2022-03-14>>>
Temat: Bash I.

Dzisiaj na zajeciach nauczylem sie:
- Niuansów wykorzystywania zmiennych powłoki, np. kiedy są, a kiedy nie są dostępne, jak je eksportować etc.
- Parę nowych zmiennych środowiskowych, jak $*/$@, $#, $?
- Zmiennych powłoki i ich wyokrzystania.
- Wykonywania operacji na ciągach znaków bezpośrednio w składni wywoływania zmiennej za pomocą ${...}
- Wykorzystywania opcji kolorowania tekstu w skryptach.

I jeszcze powtórzyłem sobie regex'y, ale mam wrażenie, że przez samą dość skomplikowaną składnie będę potrzebował jeszcze trochę przećwiczyć je, żeby płynnie z nich korzystać - choć już z sed'em idzie mi chyba całkiem nieźle. 

Zaskakuje mnie (pozytywnie) logika i elegancja zaprojektowania GNU/Linux, gdzie zagadnienia drzewa procesów, powłok, parametrów powłoki łączą się ze sobą w jasny sposób - przynajmniej jak już się zrozumie "co z czym się je".

Na pewno chciałbym jeszcze lepiej zrozumieć jak funkcjonuje kernel i proces boot'owania systemu oraz jak przekłada się to na takie wysokopoziomowe funkcje systemu jak renderowanie grafiki czy niskopoziomowe jak budowa sterowników od drukarki czy innych urządzeń peryferyjnych.

<<<2022-04-02>>>
Temat: Bash II.

Na dzisiejszych zajęciach poznawaliśmy bardziej zaawansowane funkcje bash'a.
- Nie korzystałem do tej pory z tradycyjnego przedstawiania warunków w podwójnych nawiasach kwadratowych [[ ]].
- Podobnie w przypadku pętli nie znałem do tej pory bashowego sposobu na pętlę for, który przypomina pythonowe rozwiązania, mianowicie: for i in a b c; do. 
- A także skróconego syntaksu do pętli z krokiem danej długości: for i in $(seq 1 1 10); do
i 
for i in {1..10..3}; do
^ opcja bez wywoływania dodatkowego programu,

a nawet poza znanym mi auto-wyliczaniu {1..10} opcję na literach:
{a..g} i {a..g..2}.

- Tablice również znałem i używałem, ale nie korzystałem do tej pory z dodatkowych dostępnych dla tej struktury parametrów.
Według dokumentacji tablice w bashu nie mają maksymalnego limitu rozmiaru, ani też nie muszą być indeksowane po kolei. Tablice indeksowane domyślnie nie mogą zawierać indeksów mniejszych nod zero.
Tablica jest tworzona automatycznie z przyporządkowaniem do niej pary indeks-wartość:
name[subscript]=value
można ją także zadeklarować tak:
declare -a name

Tablice asocjacyjne mozna zadeklarować:
declare -A name

Dodatkowe możliwości odwoływania się do tablic:
- array[-1] odnosi się do ostatniego elementu na tablicy.
- do dowolnego elementu tablicy można odnieść się za pomocą ${name[subscript]} - nawiasy wąsiaste są potrzebne dla uniknięcia konfliktów z operatorami rozszerzenia nazwy pliku w powłoce (?).
- podanie jako indeks '@' lub '*' rozszerza się do wszystkich elementów w danej tablicy. Jedyna różnica występuje przy elementach tablicy w cudzysłowach " " - wówczas ${name[*]} rozszerza się do pojedynczego słowa z wartością każdego elementu tablicy oddzieloną wartością zmiennej IFS, podczas gdy ${name[@]} rozszerza każdy element tablicy name do pojedynczego słowa.
- ${!name[@]} i ${!name[*]} rozszerzają się do indeksów przydzielonych w zmiennej tablicowej 'name', przy czym w przypadku użycia cudzysłowów efekt jest podobny jak przy używaniu samych parametrów '@' i '*' w cudzysłowach.

Podsumowując zajęcia to fajnie dowiedzieć się o takich smaczkach korzystania z basha. Jak widać ma on nawet bez wywoływania dodatkowych narzędzi duże możliwości.

<<<2022-04-23>>>
Temat: C/C++ Wstęp
- Miałem okazję zapoznać się bliżej ze strukturami union i struct: znałem wcześniej podstawy języka C, ale nie zajmowałem się do tej pory tymi strukturami danych w tym języku.
- Poznałem zasady kompilacji w terminalu, ponieważ do tej pory używałem Dev C++.
( W tym kompilowanie z parametrami -Wall --ansi --pedantic :) )
 - Wykorzystanie parametrów przekazywanych do funkcji main z argc i argv.
 - Poznałem rodzinę poleceń [a]to[b], np. atoi.
 

<<<2022-04-14>>>
Temat: C/C++ Procesy

<<<2022-05-28>>>
Temat: C/C++ Make, Sygnały, Sockety
[TBA] 
